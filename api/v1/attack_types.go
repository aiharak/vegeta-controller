package v1

import metaV1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// AttackSpec defines the desired state of Attack
type AttackSpec struct {
	// Parallelism of Attack (default 1)
	// +kubebuilder:validation:Minimum=1
	Parallelism int32 `json:"parallelism,omitempty"`
	// Scenario of Attack
	// More info: https://github.com/tsenart/vegeta#http-format
	Scenario string `json:"scenario"`
	// +kubebuilder:validation:Enum=text;json
	Output   string       `json:"output,omitempty"`
	Option   VegetaOption `json:"option,omitempty"`
	Template Template     `json:"template,omitempty"`
}

// AttackStatus defines the observed state of Attack
type AttackStatus struct{}

// VegetaOption defines the vegeta options
type VegetaOption struct {
	// Duration of the test [0 = forever] (default 10s)
	// More info: https://github.com/tsenart/vegeta#usage-manual
	// +kubebuilder:validation:Pattern=^\d+s$
	Duration string `json:"duration,omitempty"`
	// Max open idle connections per target host (default 10000)
	// More info: https://github.com/tsenart/vegeta#usage-manual
	// +kubebuilder:validation:Minimum=1
	Connections int `json:"connections,omitempty"`
	// Number of requests per time unit [0 = infinity] (default 50/1s)
	// More info: https://github.com/tsenart/vegeta#usage-manual
	// +kubebuilder:validation:Minimum=1
	Rate int `json:"rate,omitempty"`
	// Requests timeout (default 30s)
	// More info: https://github.com/tsenart/vegeta#usage-manual
	// +kubebuilder:validation:Pattern=^\d+s$
	Timeout string `json:"timeout,omitempty"`
	// Initial number of workers (default 10)
	// More info: https://github.com/tsenart/vegeta#usage-manual
	// +kubebuilder:validation:Minimum=1
	Workers int `json:"workers,omitempty"`
}

// Template defines the pod template generated by job
type Template struct {
	Metadata Metadata `json:"metadata,omitempty"`
}

// Metadata defines the pod metadata generated by job
type Metadata struct {
	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	// More info: http://kubernetes.io/docs/user-guide/labels
	Labels map[string]string `json:"labels,omitempty" protobuf:"bytes,11,rep,name=labels"`

	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations map[string]string `json:"annotations,omitempty" protobuf:"bytes,12,rep,name=annotations"`
}

// +kubebuilder:object:root=true

// Attack is the schema for the attacks API
type Attack struct {
	metaV1.TypeMeta   `json:",inline"`
	metaV1.ObjectMeta `json:"metadata,omitempty"`

	Spec   AttackSpec   `json:"spec,omitempty"`
	Status AttackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AttackList contains a list of Attack
type AttackList struct {
	metaV1.TypeMeta `json:",inline"`
	metaV1.ListMeta `json:"metadata,omitempty"`
	Items           []Attack `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Attack{}, &AttackList{})
}
